import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import os

# Check if the dataset file exists
dataset_path = 'iris.csv'
if not os.path.exists(dataset_path):
    print(f"Error: '{dataset_path}' not found in {os.getcwd()}")
    print("Ensure 'iris.csv' is in the same directory or specify the correct path.")
    exit()

# Load the dataset
try:
    df = pd.read_csv(dataset_path)
except Exception as e:
    print(f"Error loading '{dataset_path}': {str(e)}")
    exit()

# Verify expected columns
expected_columns = ['Id', 'SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm', 'Species']
if not all(col in df.columns for col in expected_columns):
    print(f"Error: Dataset must contain: {expected_columns}")
    print(f"Found: {list(df.columns)}")
    exit()

# Display first few rows
print("First 5 rows of the dataset:")
print(df.head())

# Check for missing values
print("\nMissing values:")
print(df.isnull().sum())

# Drop 'Id' column
df = df.drop('Id', axis=1)

# Separate features and target
X = df.drop('Species', axis=1)
y = df['Species']

# Encode target variable
le = LabelEncoder()
y = le.fit_transform(y)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate model
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy:.4f}")

# Classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=le.classes_))

# Plot confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', 
            xticklabels=le.classes_, yticklabels=le.classes_)
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Feature importance
feature_importance = pd.DataFrame({
    'feature': X.columns,
    'importance': model.feature_importances_
}).sort_values('importance', ascending=False)
print("\nFeature Importance:")
print(feature_importance)

# Example prediction with feature names
sample = pd.DataFrame([[5.1, 3.5, 1.4, 0.2]], columns=X.columns)
prediction = model.predict(sample)
print(f"\nSample prediction: {le.inverse_transform(prediction)[0]}")
